lines(sbux_ccret, type="l", col="blue", lwd=2)
lines(sbux_ccret)
? lines
lines(sbux_ccret, type="l", col="red")
lines(sbux_ccret, type="l", col="red", lwd=2)
sbux_gret = sbux_ret+1
sbux_gret.
sbux_gre
sbux_gret
sbux_fv = cumprod(sbux_gret)
sbux_fv
sbux
View(sbux_df)
View(sbux_df)
index_1=which(sbux_df$Date?c)
?c
x_vals = seq(-0.25, 0.35, length.out = 100)
MSFT = dnorm(x_vals, 0.05, 0.1)
SBUX = dnorm(x_vals, 0.025, 0.05)
# Normal curve for MSFT
plot(x_vals, MSFT, type = "l", col = "blue", ylab = "Normal curves",
ylim = c(0, 8))
# Add a normal curve for SBUX
# Add a plot legend
legend("topleft", legend = c("Microsoft", "Starbucks"),
col = c("blue", "red"), lty = 1)
lines(SBUX, type = "l", col = "red")
lines(SBUX, type = "l", col = "red")
SBUX = dnorm(x_vals, 0.025, 0.05)
SBUX
lines(SBUX, col = "red")
? lines
mu_R = 0.04
sigma_R = 0.09
W0 = 100000
qnorm(0.01, mu_R, sigma_R)
PA = c(38.23, 41.29)
PC = c(41.11, 41.74)
.
PA = c(38.23, 41.29)
PC = c(41.11, 41.74)
RA = (PA[1]-PA[0])/PA[0]
RC = (PC[1]-PC[0])/PC[0]
RA
RC
PA
PC
PA[1]
RA
RA=0.08004
RA_annual = (1+RA)^12-1
RA_annual
exp(log(1+RA))^12
exp(log(1+RA))^12-1
log(1+RA)
xA = 8000*(1+RA)
xC = 2000*(1+RC)
RA=0.08004
RC=0.01532
xA = 8000*(1+RA)
xA
xC = 2000*(1+RC)
xC
(xA+xC-10000)/10000
install.packages("PerformanceAnalytics")
install.packages("tseries")
# Load relevant packages
library(PerformanceAnalytics);library(zoo);library(tseries);
# Get the monthly adjusted closing price data on VBLTX, FMAGX and SBUX from Yahoo! using the tseries function get.hist.quote(). Set the sample to Jan 1998 through Dec 2009.
# Get the adjusted closing prices from Yahoo!
VBLTX_prices = get.hist.quote(instrument="vbltx", start="1998-01-01",end="2009-12-31", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo")
FMAGX_prices = get.hist.quote(instrument="fmagx", start="1998-01-01",end="2009-12-31", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo")
SBUX_prices = get.hist.quote(instrument="sbux", start="1998-01-01",end="2009-12-31", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo")
# Change the class of the time index to yearmon which is appropriate for monthly data
# index() and as.yearmon() are functions in the zoo package
index(VBLTX_prices) = as.yearmon(index(VBLTX_prices))
index(FMAGX_prices)  = as.yearmon(index(FMAGX_prices))
index(SBUX_prices)  = as.yearmon(index(SBUX_prices))
# Inspect your data
start(SBUX_prices)
end(SBUX_prices)
# The variables VBLTX_prices, FMAGX_prices and SBUX_prices are preloaded in your workspace
# Create merged price data
all_prices = merge(VBLTX_prices, FMAGX_prices, SBUX_prices)
# Rename columns
colnames(all_prices) = c("VBLTX", "FMAGX", "SBUX")
# Calculate cc returns as difference in log prices
all_returns = diff(log(all_prices), 1)
# Look at the return data
start(all_returns)
end(all_returns)
colnames(all_returns)
head(all_returns)
chart.TimeSeries(all_returns, legend.loc="bottom", main=" ")
# The previous charts are a bit hard to read. The PerformanceAnalytics function
# chart.Bar makes it easier to compare the returns of different assets on the
# same plot
chart.Bar(all_returns, legend.loc="bottom", main=" ")
chart.TimeSeries(all_returns, legend.loc="bottom", main=" ")
chart.TimeSeries(all_returns, legend.loc="bottom", main=" ")
chart.Bar(all_returns, legend.loc="bottom", main=" ")
chart.CumReturns(simple_returns ,wealth.index=TRUE, main="Growth of $1")
simple_returns = diff(all_prices)/lag(all_prices, k=-1);
head(all_returns)
chart.CumReturns(simple_returns ,wealth.index=TRUE, main="Growth of $1")
# Create matrix with returns
return_matrix = coredata(all_returns);
View(return_matrix)
View(return_matrix)
# Show boxplot of three series on one plot
boxplot(return_matrix[,"VBLTX"], return_matrix[,"FMAGX"], return_matrix[,"SBUX"],
names=colnames(return_matrix), col="slateblue1")
# Do the same thing using the PerformanceAnalytics function chart.Boxplot
chart.Boxplot(return_matrix)
chart.Boxplot(all_returns)
chart.Boxplot(all_returns)
chart.Boxplot(return_matrix)
chart.Boxplot(return_matrix)
chart.Boxplot(all_returns)
chart.Boxplot(return_matrix)
chart.Boxplot(return_matrix)
# Create matrix with returns
return_matrix = coredata(all_returns);
summary(return_matrix)
# Compute descriptive statistics by column using the base R function apply()
args(apply)
apply(return_matrix, 2, mean)
apply(return_matrix, 2, var)
apply(return_matrix, 2, sd)
apply(return_matrix, 2, skewness)
apply(return_matrix, 2, kurtosis)
table.stats(all_returns)
library(PerformanceAnalytics);
table.stats(all_returns)
table.stats(return_matrix)
table.Stats(return_matrix)
table.Stats(return_matrix)
table.Stats(all_returns)
pairs(return_matrix, pch=16, col=slateblue1)
pairs(return_matrix, pch=16, col="slateblue1")
apply(return_matrix, 2, mean)
apply(return_matrix, 2, var)
apply(return_matrix, 2,var)
apply(return_matrix, 2,cor)
var(return_matrix)
cor(return_matrix)
y <- runif(1000)
x1 <- runif(1000)
x2 <- runif(1000)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
'summaryRprof()
''
'
summaryRprof()
set.seed(1)
rpois(5, 2)
testData <- read.fwf(file="./test/X_test.txt",
widths=rep.int(16, 561))
trainData <- read.fwf(file="./train/X_train.txt",
widths=rep.int(16, 561))
setwd("C:\\Users\\tom\\Desktop\\getdata-projectfiles-UCI HAR Dataset")
testData <- read.fwf(file="./test/X_test.txt",
widths=rep.int(16, 561))
trainData <- read.fwf(file="./train/X_train.txt",
widths=rep.int(16, 561))
labelTestDate <- read.fwf(file="./test/y_test.txt",
widths=c(1))
labelTrainDate <- read.fwf(file="./train/y_train.txt",
widths=c(1))
activityLabel <- read.csv(file="./activity_labels.txt", sep=' ')
mergeData <- rbind(cbind(testData, labelTestDate), cbind(trainData, labelTrainDate))
View(mergeData)
mergeData[562]
mergeData[562] <- factor(activityLabel)
activityLabel
activityLabel[2]
activityLabel[3]
activityLabel <- read.csv(file="./activity_labels.txt", sep=' ')
activityLabel
read.csv(file="./activity_labels.txt", sep='\t')
read.table(file="./activity_labels.txt", sep=' ')
activityLabel <- read.table(file="./activity_labels.txt", sep=' ')
activityLabel[2]
activityLabel[1]
mergeData[562] <- factor(activityLabel[2])
class(activityLabel[2])
as.vector(activityLabel[2])
mergeData[562] <- factor(as.vector(activityLabel[2]))
tom <- as.list(activityLabel[2])
class(tom
)
mergeData[562] <- factor(tom)
mergeData[562] <- factor(c(activityLabel[2,1], activityLabel[2,2],activityLabel[2,3], activityLabel[2,4], activityLabel[2,5], activityLabel[2,6] ))
c(activityLabel[2,1], activityLabel[2,2],activityLabel[2,3], activityLabel[2,4], activityLabel[2,5], activityLabel[2,6] )
tom
tom <- as.character(tom)
mergeData[562] <- factor(tom)
mergeData[562]
mergeData[562]
factor(activityLabel[2])
factor(as.character(activityLabel[2]))
mergeData <- rbind(cbind(testData, labelTestDate), cbind(trainData, labelTrainDate))
level[mergeData[563]] <- as.character(activityLabel[2])
levels[mergeData[563]] <- as.character(activityLabel[2])
mergeData[563]
mergeData[563]
mergeData[562]
levels[mergeData[562]] <- as.character(activityLabel[2])
levels[mergeData[562, ]] <- as.character(activityLabel[2])
levels[mergeData[562, ]] <- as.character(activityLabel[2, ])
tom <- as.character(activityLabel[2])
tom
tom <- as.character(activityLabel[2, ])
tom
activityLabel
tom <- as.character(activityLabel[2])
tom
tom <- activityLabel[2]
tom
tom <- as.character(tom)
tom
tom <- lapply(activityLabel[2], as.character)
tom
activityLabel2 <- lapply(activityLabel[2], as.character)
levels(mergeData[562]) <- activityLabel2
mergeData[562]
class(mergeData[562])
class(mergeData[562, ])
class(mergeData[562, ])
levels(mergeData[562]) <- activityLabel2
levels(mergeData[562])
activityLabel2
?levels
mergeData[562] <- as.factor(mergeData[562])
mergeData[562] <- as.factor(mergeData[562])
mergeData[562]
mergeData[, 562]
levels(mergeData[,562]) <- activityLabel2
mergeData[,562]
class(mergeData[,562])
mergeData[,562] <- as.factor(mergeData[,562])
class(mergeData[,562])
mergeData[,562]
levels(mergeData[,562]) <- activityLabel2
mergeData[,562]
mergeData[,562]
mergeData[,562] <- as.integer(mergeData[,562])
mergeData[,562]
mergeData <- rbind(cbind(testData, labelTestDate), cbind(trainData, labelTrainDate))
mergeData[,562] <- as.factor(mergeData[,562], level=activityLabel2)
?as.factor
mergeData[,562] <- as.factor(mergeData[,562], labels=activityLabel2)
mergeData[,562]
mergeData[,562] <- as.factor(mergeData[,562], labels=activityLabel2)
mergeData[,562] <- as.factor(mergeData[,562], labels=activityLabel2, order=TRUE)
mergeData[,562] <- as.factor(mergeData[,562], levels=activityLabel2, order=TRUE)
mergeData[,562]
levels(mergeData[,562]) <- activityLabel2
mergeData[,562]
mergeData[1:5]
mergeData[1:5, ]
mergeData[,562]<-as.factor(mergeData[,562])
levels(mergeData[,562]) <- activityLabel2
mergeData[1:5, ]
mergeData <- rbind(cbind(testData, labelTestDate), cbind(trainData, labelTrainDate))
mergeData[,562]<-as.factor(mergeData[,562])
levels(mergeData[,562]) <- activityLabel2
mergeData[1:5, ]
attrs(mergeData[,562])
attr(mergeData[,562])
attrs(mergeData[,562])
class(mergeData[,562]
)
activityLabel2
class(activityLabel2)
acactivityLabel2 <- as.vector(activityLabel2)
class(activityLabel2)
mergeData <- rbind(cbind(testData, labelTestDate), cbind(trainData, labelTrainDate))
mergeData[,562]<-as.factor(mergeData[,562])
levels(mergeData[,562]) <- activityLabel2
mergeData[,562]
? drop
activityLabel2
drop(activityLabel2)
c(activityLabel2[1], activityLabel2[2])
c(activityLabel2[[1]], activityLabel2[[2]])
activityLabel2[1]
activityLabel2[,1]
activityLabel2[1,1]
activityLabel2[1]
activityLabel2[[1]]
activityLabel2$1
class(activityLabel2)
?list
unlist(activityLabel2)
drop( unlist(activityLabel2))
activityLabel2 <-  unlist(activityLabel2)
activityLabel2[1]
activityLabel2[2]
activityLabel2[3]
activityLabel2[4]
levels(mergeData[,562]) <- activityLabel2
mergeData[,562]
mergeData[,562]<-as.factor(mergeData[,562])
levels(mergeData[,562]) <- activityLabel2
mergeData[,562]
mergeData <- rbind(cbind(testData, labelTestDate), cbind(trainData, labelTrainDate))
mergeData[,562]<-as.factor(mergeData[,562])
levels(mergeData[,562]) <- activityLabel2
mergeData[,562]
featureLabel <- read.table(file="./features.txt", sep=' ')
featureLabel2 <- lapply(featureLabel[2], as.character)
featureLabel2 <- unlist(featureLabel2)
featureLabel2
featureLabel2 <- append(featureLabel2, "Activity")
featureLabel2
names(mergeData) <- featureLabel2
mergeData[1:5, ]
?split
splitData <- split(mergeData, mergeData[, 562])
splitData
subjectTest <- read.table(file="./test/subject_test.txt", sep=' ')
subjectTrain <- read.table(file="./train/subject_train.txt", sep=' ')
mergeData <- rbind(cbind(testData, labelTestDate, subjectTest), cbind(trainData, labelTrainDate, subjectTrain))
dataMean <- apply(mergeData[,1:561], 2, mean)
dataSD <- apply)(mergeData[,1:561], 2, )
dataSD <- apply(mergeData[,1:561], 2, sd)
mergeData[,562]<-as.factor(mergeData[,562])
levels(mergeData[,562]) <- activityLabel2
mergeData[,563]<-as.factor(mergeData[,563])
mergeData[,562]
mergeData[,563]
featureLabel <- read.table(file="./features.txt", sep=' ')
featureLabel2 <- lapply(featureLabel[2], as.character)
featureLabel2 <- unlist(featureLabel2)
featureLabel2 <- append(featureLabel2, "Activity", "Subject")
names(mergeData) <- featureLabel2
?append
featureLabel2 <- append(append(featureLabel2, "Activity"), "Subject")
featureLabel <- read.table(file="./features.txt", sep=' ')
featureLabel2 <- lapply(featureLabel[2], as.character)
featureLabel2 <- unlist(featureLabel2)
featureLabel2 <- append(append(featureLabel2, "Activity"), "Subject")
names(mergeData) <- featureLabel2
mergeData[1,]
splitData <- split(mergeData, mergeData[, 562])
sapply(splitData, split, mergeData[, 563])
splitData <- split(mergeData, mergeData[, 562])
splitData <- split(mergeData, list(mergeData[, 562], mergeData[, 563]))
cleanDataSet <- lapply(splitData, mean)
splitData[[1]]
mean(splitData[[1]])
mean(mergeData[, 1])
colMean(splitData[[1]])
colMeans(splitData[[1]])
splitData[[1]]
colMeans(splitData[[1]][1:561])
colMeans(splitData[[1]][1:562])
colMeans(splitData[[1]][1:561])
cleanDataSet <- lapply(splitData, function(x) colMeans(x[1:561]))
cleanDataSet
cleanDataSet[[1]]
cleanDataSet[[2]]
cleanDataSetDF <- as.data.frame(cleanDataSet)
View(cleanDataSetDF)
splitData[[1]]
str(cleanDataSet)
cleanDataSet <- lapply(splitData, function(x) append(append(colMeans(x[1:561]), x[1, 562]),x[1, 563]))
cleanDataSet[[1]]
cleanDataSet[[1]]
cleanDataSet <- lapply(splitData, function(x) append(append(colMeans(x[1:561]), Activity=x[1, 562]), Subject=x[1, 563]))
class(cleanDataSet[[1]])
cleanDataSet <- lapply(splitData, function(x) append(append(x[1, 563], x[1, 562]), colMeans(x[1:561])))
cleanDataSetDF <- as.data.frame(cleanDataSet)
View(cleanDataSetDF)
?as.data.frame
myList <- list(
A = 1:3,
B = 1:5)
unlist(myList)
data.frame(Reduce(rbind, cleanDataSet))
tom <- data.frame(Reduce(rbind, cleanDataSet))
View(tom)
data.frame(t(sapply(cleanDataSet,c)))
tom <- data.frame(t(sapply(cleanDataSet,c)))
View(tom)
cleanDataSetDF <- data.frame(Reduce(rbind, cleanDataSet))
View(cleanDataSetDF)
names(cleanDataSetDF) <- append(append("Activity", "Subject"), names(cleanDataSetDF))
names(cleanDataSetDF) <- append(append("Activity", "Subject"), names(cleanDataSetDF[3:563]))
View(cleanDataSetDF)
names(cleanDataSetDF) <- append(append("Subject", "Activity"), names(cleanDataSetDF[3:563]))
cleanDataSetDF[,2]<-as.factor(mergeData[,2])
levels(mergeData[,2]) <- activityLabel2
cleanDataSetDF <- data.frame(Reduce(rbind, cleanDataSet))
names(cleanDataSetDF) <- append(append("Subject", "Activity"), names(cleanDataSetDF[3:563]))
cleanDataSetDF[,2]<-as.factor(cleanDataSetDF[,2])
levels(mergeData[,2]) <- activityLabel2
View(cleanDataSetDF)
cleanDataSetDF <- data.frame(Reduce(rbind, cleanDataSet))
names(cleanDataSetDF) <- append(append("Subject", "Activity"), names(cleanDataSetDF[3:563]))
cleanDataSetDF[,2]<-as.factor(cleanDataSetDF[,2])
levels(cleanDataSetDF[,2]) <- activityLabel2
View(cleanDataSetDF)
?write.table
write.table(cleanDataSetDF, file="tidyDataSet.txt", row.name=FALSE)
getwd()
write.table(cleanDataSetDF, file="tidyDataSet.txt", row.name=FALSE, sep=',')
View(cleanDataSetDF)
View(cleanDataSetDF)
names(cleanDataSetDF) <- append(append("Subject", "Activity"), activityLabel2))
names(cleanDataSetDF) <- append(append("Subject", "Activity"), activityLabel2)))
names(cleanDataSetDF) <- append(append("Subject", "Activity"), activityLabel2)
cleanDataSetDF[,2]<-as.factor(cleanDataSetDF[,2])
names(cleanDataSetDF) <- append(append("Subject", "Activity"), featureLabel2)
View(cleanDataSetDF)
names(cleanDataSetDF) <- append(append("Subject", "Activity"), featureLabel2[1:561]))
names(cleanDataSetDF) <- append(append("Subject", "Activity"), featureLabel2[1:561])
View(cleanDataSetDF)
write.table(cleanDataSetDF, file="tidyDataSet.txt", row.name=FALSE, sep=',')
setwd(C:\\Users\\tom\\Google 雲端硬碟\\Programming\\R\\Getting and Cleaning Data\\quiz)
setwd("C:\\Users\\tom\\Google 雲端硬碟\\Programming\\R\\Getting and Cleaning Data\\quiz")
?readLines
?readLIne
?readLine
readLine(getdata-data-ss06hid.csv)
readLines(getdata-data-ss06hid.csv, n-1)
readLines("getdata-data-ss06hid.csv", n=1)
test<-readLines("getdata-data-ss06hid.csv", n=1)
?strsplit
strsplit(test, ",")
test1 <- strsplit(test, ",")
test1 <- strsplit(test, "wgtp")
test1
test1 <- strsplit(test, "wgtp")
test1 <- strsplit(test, ",")
test2 <- strsplit(test1, ",")
test2 <- strsplit(test1, "wgtp")
lapply(test1, split, "wgtp")
lapply(test1, strsplit, "wgtp")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes\
sampleTimes
sampleTimes <- as.Date(sampleTimes)
sampleTimes
class(sampleTimes)
?year
?as.year
?as.yearmon
tom <- as.numeric(format(sampleTimes, "%Y"))
tom
tom[tom==2012]
tom==2012
sum(tom==2012)
?format
tom2 <- tom[tom==2012]
tom2
tom2 <- sampleTimes[tom==2012]
tom2
tom3 <- weekdays(tom2)
tom3
sum(tom3=="Monday")
q4df1 <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", header=TRUE)
View(`q4df1`)
q4df1[3, 5:194]
q4df1[c(3, 5:194)]
q4df1[c(3, 5:194), ]
q4df1 <- q4df1[c(5:194), ]
View(`q4df1`)
q4df1 <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", header=TRUE)
View(`q4df1`)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?text
library(lattice)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?print.trellis()
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
load(ggplot2)
library(ggplot2)
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("qplot")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
