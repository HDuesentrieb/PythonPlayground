trainingPCA <- training[, selectFeatures]
for(i in seq_len(ncol(trainingPCA))){
trainingPCA[, i] <- as.numeric(as.character(trainingPCA[, i]))
}
testingPCA <- testing[, selectFeatures]
testingPCA[, 10]
class(testingPCA[, 10])
class(trainingingPCA[, 10])
class(trainingPCA[, 10])
class(trainingPCA[, 20])
class(trainingPCA[, 30])
print(preProc)
preProc <- preProcess(trainingPCA, method="pca")
trainingPCA <- predict(preProc, trainingPCA)
testingPCA <- predict(preProc, testingPCA)
View(trainingPCA)
trainingSet <- cbind(trainingPCA, classe=training[,classeIndex])
samples <- sample(19622, 2000, replace=FALSE)
samplesTraining <- trainingSet[samples, ]
modelRF <- train(y=as.factor(samplesTraining[, 3]),
x=cbind(as.numeric(samplesTraining[, 1]), as.numeric(samplesTraining[, 2])),
method='rf', prox=TRUE)
View(samplesTraining)
modelRF <- train(y=as.factor(samplesTraining[, 26]),
x=samplesTraining[, 1:25]),
method='rf', prox=TRUE)
modelRF <- train(y=as.factor(samplesTraining[, 26]),
x=samplesTraining[, 1:25],
method='rf', prox=TRUE)
modelRF <- train(y=as.factor(samplesTraining[, 26]),
x=samplesTraining[, 1:25],
method='rf', prox=TRUE, do.trace=T)
test <- predict(modelRF, cbind(as.numeric(samplesTraining[, 1]), as.numeric(samplesTraining[, 2])))
test <- predict(modelRF, samplesTraining[, 1:25])
levels(test) <- c('A', 'B', 'C', 'D', 'E')
confusionMatrix(test,samplesTraining[,3] )
confusionMatrix(test,samplesTraining[,26] )
table(test,samplesTraining[,26] )
modelRPART <- train(y=as.factor(samplesTraining[, 26]),
x=samplesTraining[, 1:25],
method='rpart')
test <- predict(modelRPART, samplesTraining[, 1:25])
levels(test) <- c('A', 'B', 'C', 'D', 'E')
confusionMatrix(test,samplesTraining[,26] )
table(test,samplesTraining[,26] )
fancyRpartPlot(modelRPART$finalModel)
answers = rep("A", 20)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
getwd()
test <- predict(modelRF, testingPCA[, 1:25])
test
pml_write_files(test)
samplesTraining <- trainingSet
modelRF <- train(y=as.factor(samplesTraining[, 26]),
x=samplesTraining[, 1:25],
method='rf', prox=TRUE)
warnings()
set.seed(32323)
folds <- createFolds(y=SampleTraining[, 26], k=10, list=TRUE, retrunTrain=TRUE)
folds <- createFolds(y=SampleTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
folds
sapply(folds, length)
trainingSet <- cbind(trainingPCA, classe=training[,classeIndex])
samples <- sample(19622, 2000, replace=FALSE)
samplesTraining <- trainingSet
foldTrain <- sampleTraining[folds[i],]
foldTrain <- samplesTraining[folds[i],]
foldTest <- samplesTraining[-folds[i]],]
folds[i]
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
folds[i]
?createFold
s
?createFolds
folds[i,]
folds[1]
i<-1
foldTrain <- samplesTraining[folds[i],]
foldTest <- samplesTraining[-folds[i],]
class(folds[i])
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
trainingSet <- cbind(trainingPCA, classe=training[,classeIndex])
samples <- sample(19622, 2000, replace=FALSE)
samplesTraining <- trainingSet[samples,]
set.seed(32323)
trainingSet <- cbind(trainingPCA, classe=training[,classeIndex])
samples <- sample(19622, 2000, replace=FALSE)
samplesTraining <- trainingSet[samples,]
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
modelRF <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='rf', prox=TRUE)
preds <- predict(modelRPART, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
confusionMatrix(preds,foldTest[,26] )
table(preds,foldTest[,26])
preds <- predict(modelRPART, foldTrain[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
confusionMatrix(preds,foldTrain[,26] )
table(preds,foldTrain[,26])
preds <- predict(modelRPART, foldTrain[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
confusionMatrix(preds,foldTrain[,26] )
table(preds,foldTrain[,26])
plot(modelRF)
preds <- predict(modelRF, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
confusionMatrix(preds,foldTest[,26] )
table(preds,foldTest[,26])
tom <-confusionMatrix(preds,foldTest[,26] )
tom$Accuracy
tom[Accuracy]
tom.Accuracy
tom$table
tom$attr("Accuracy")
tom <- table(preds,foldTest[,26])
acc <- tom[1,1]+tom[2,2]+tom[3,3]+tom[4,4]+tom[5,5]/sum(tom)
ac
acc
acc <- (tom[1,1]+tom[2,2]+tom[3,3]+tom[4,4]+tom[5,5])/sum(tom)
acc
result <- .
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
result <- .
set.seed(32323)
trainingSet <- cbind(trainingPCA, classe=training[,classeIndex])
samples <- sample(19622, 200, replace=FALSE)
samplesTraining <- trainingSet[samples,]
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
result <- .
for(i in 1:10){
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
modelRF <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='rf', prox=TRUE)
preds <- predict(modelRF, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
result <- c(result, acc)
}
set.seed(32323)
trainingSet <- cbind(trainingPCA, classe=training[,classeIndex])
samples <- sample(19622, 50, replace=FALSE)
samplesTraining <- trainingSet[samples,]
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
result <- .
i <-1
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
modelRF <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='rf', prox=TRUE)
as.factor(foldTrain[, 26]
)
set.seed(32323)
trainingSet <- cbind(trainingPCA, classe=training[,classeIndex])
samples <- sample(19622, 80, replace=FALSE)
samplesTraining <- trainingSet[samples,]
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
modelRF <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='rf', prox=TRUE)
preds <- predict(modelRF, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
result <- c(result, acc)
result <- c()
result <- c(result, acc)
result
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
result <- c()
for(i in 1:10){
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
modelRF <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='rf', prox=TRUE)
preds <- predict(modelRF, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
result <- c(result, acc)
}
result
modelNB <- train(y=as.factor(foldTrain[, 3]),
x=foldTrain[, 1:25],
method='nb')
modelNB <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='nb')
warnings()
remove(modelNB)
modelNB <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='nb')
preds <- predict(modelRF, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
result <- c(result, acc)
result
average(result)
mean(result)
preds <- predict(modelNB, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
result <- c(result, acc)
result
mean(result)
remove(result)
preds <- predict(modelNB, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
result <- c(result, acc)
result <- c()
preds <- predict(modelNB, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
result <- c(result, acc)
result
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
resultNB <- c()
for(i in 1:10){
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
modelNB <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='nb')
preds <- predict(modelNB, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultNB <- c(result, acc)
}
resultNB
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
resultRpart <- c()
for(i in 1:10){
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
modelRPART <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='rpart')
preds <- predict(modelRPART, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultRpart <- c(resultRpart, acc)
}
resultRpart
average(resultRpart)
mean(resultRpart)
modelSVM <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='svm')
library(caret)
modelSVM <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='svm')
modelSVM <- svm(y=as.factor(foldTrain[, 26]),
+                     x=foldTrain[, 1:25])
modelSVM <- svm(foldTrain[, 1:25], as.factor(foldTrain[, 26]))
library(e1071)
modelSVM <- svm(foldTrain[, 1:25], as.factor(foldTrain[, 26]))
summary(modelSVM)
preds <- predict(modelSVM, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
acc
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
resultRpart <- c()
for(i in 1:10){
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
modelSVM <- svm(foldTrain[, 1:25], as.factor(foldTrain[, 26]))
preds <- predict(modelSVM, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultSVM <- c(resultSVM, acc)
}
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
resultSVM <- c()
for(i in 1:10){
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
modelSVM <- svm(foldTrain[, 1:25], as.factor(foldTrain[, 26]))
preds <- predict(modelSVM, foldTest[, 1:25])
levels(preds) <- c('A', 'B', 'C', 'D', 'E')
cm <- table(preds,foldTest[,26])
acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultSVM <- c(resultSVM, acc)
}
resultSVM
library(e1071)
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
resultRF <- c(); resultNB <- c(); resultRpart <- c(); resultSVM <- c()
for(i in 1:10){
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
modelRF <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='rf', prox=TRUE)
modelNB <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='nb')
modelRPART <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='rpart')
modelSVM <- svm(foldTrain[, 1:25], as.factor(foldTrain[, 26]))
predsRF <- predict(modelRF, foldTest[, 1:25])
predsNB <- predict(modelRF, foldTest[, 1:25])
predsRPART <- predict(modelRF, foldTest[, 1:25])
predsSVM <- predict(modelRF, foldTest[, 1:25])
levels(predsRF) <- c('A', 'B', 'C', 'D', 'E'); levels(predsNB) <- c('A', 'B', 'C', 'D', 'E');
levels(predsRPART) <- c('A', 'B', 'C', 'D', 'E'); levels(predsSVM) <- c('A', 'B', 'C', 'D', 'E');
cm <- table(predsRF,foldTest[,26]);  acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultRF <- c(resultRF, acc)
cm <- table(predsNB,foldTest[,26]);  acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultNB <- c(resultNB, acc)
cm <- table(predsRPART,foldTest[,26]);  acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultRpart <- c(resultRpart, acc)
cm <- table(predsSVM,foldTest[,26]);  acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultSVM <- c(resultSVM, acc)
}
library(e1071)
set.seed(32323)
folds <- createFolds(y=samplesTraining[, 26], k=10, list=TRUE, returnTrain=TRUE)
resultRF <- c(); resultNB <- c(); resultRpart <- c(); resultSVM <- c()
for(i in 1:10){
foldTrain <- samplesTraining[unlist(folds[i]),]
foldTest <- samplesTraining[-unlist(folds[i]),]
modelRF <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='rf', prox=TRUE)
modelNB <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='nb')
modelRPART <- train(y=as.factor(foldTrain[, 26]),
x=foldTrain[, 1:25],
method='rpart')
modelSVM <- svm(foldTrain[, 1:25], as.factor(foldTrain[, 26]))
predsRF <- predict(modelRF, foldTest[, 1:25])
predsNB <- predict(modelNB, foldTest[, 1:25])
predsRPART <- predict(modelRPART, foldTest[, 1:25])
predsSVM <- predict(modelSVM, foldTest[, 1:25])
levels(predsRF) <- c('A', 'B', 'C', 'D', 'E'); levels(predsNB) <- c('A', 'B', 'C', 'D', 'E');
levels(predsRPART) <- c('A', 'B', 'C', 'D', 'E'); levels(predsSVM) <- c('A', 'B', 'C', 'D', 'E');
cm <- table(predsRF,foldTest[,26]);  acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultRF <- c(resultRF, acc)
cm <- table(predsNB,foldTest[,26]);  acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultNB <- c(resultNB, acc)
cm <- table(predsRPART,foldTest[,26]);  acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultRpart <- c(resultRpart, acc)
cm <- table(predsSVM,foldTest[,26]);  acc <- (cm[1,1]+cm[2,2]+cm[3,3]+cm[4,4]+cm[5,5])/sum(cm)
resultSVM <- c(resultSVM, acc)
}
resultRF
resultNB
resultRpart
resultSVM
cbind(mean(resultRF), sd(resultRF))
cbind(mean(resultNB), sd(resultNB))
cbind(mean(resultRpart), sd(resultRpart))
cbind(mean(resultSVM), sd(resultSVM))
finalResult <- rbind(resultRF, resultNB, resultRpart, resultSVM)
mean(finalResult)
rowmean(finalResult)
rowMeans(finalResult)
rowSd(finalResult)
resultMean = rowMeans(finalResult)
resultSD = sapply(finalResult, 1, sd)
resultSD = apply(finalResult, 1, sd)
resultSD
sd(resultRF)
transpose(resultMean)
t(resultMean)
finalResult <- cbind(finalResult, resultMean, resultSD)
View(finalResult)
datatables(finalResult)
datatable(finalResult)
finalResult
names(finalResult)
cnames(finalResult)
cname=(finalResult)
cname(finalResult)
names(finalResult)
class(finalResult)
colnames(finalResult)
colnames(finalResult) <- ("1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "mean", "sd")
colnames(finalResult) <- c("1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "mean", "sd")
finalResult
library(caret)
preProc <- preProcess(trainingPCA, method="pca")
trainingPCA <- predict(preProc, trainingPCA)
testingPCA <- predict(preProc, testingPCA)
trainingSet <- cbind(trainingPCA, classe=training[,classeIndex])
library(RCurl)
trainURL <- getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", ssl.verifypeer=FALSE)
training <- read.csv(text = trainURL)
testURL <- getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", ssl.verifypeer=FALSE)
testing <- read.csv(text = testURL)
selectFeatures <- c(8,9,10,11,37,38,39,40,41,42,43,44,45,46,47,48,49,60,61,62,63,64,65,66,67,68,84,85,86,102,113,114,115,116,117,118,119,120,121,122,123,124,140,151,152,153,154,155,156,157,158,159)
trainingPCA <- training[, selectFeatures]
for(i in seq_len(ncol(trainingPCA))){
trainingPCA[, i] <- as.numeric(as.character(trainingPCA[, i]))
}
testingPCA <- testing[, selectFeatures]
library(caret)
preProc <- preProcess(trainingPCA, method="pca")
trainingPCA <- predict(preProc, trainingPCA)
testingPCA <- predict(preProc, testingPCA)
trainingSet <- cbind(trainingPCA, classe=training[,classeIndex])
classeIndex <- 160
training[,classeIndex]
library(caret)
preProc <- preProcess(trainingPCA, method="pca")
trainingPCA <- predict(preProc, trainingPCA)
testingPCA <- predict(preProc, testingPCA)
trainingSet <- cbind(trainingPCA, classe=training[,classeIndex])
samples <- sample(19622, 2000, replace=FALSE)
samplesTraining <- trainingSet[, samples]
samplesTraining <- trainingSet[samples,]
samplesTraining
View(trainingSet)
?pandoc
answers = rep("A", 20)
answers = c('B', 'A', 'A', 'A', 'A', 'E', 'D', 'B', 'A', 'A', 'A', 'C', 'B', 'A', 'E', 'E', 'A', 'B', 'B', 'B')
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
airquality
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
dTable(airquality, sPaginationType = "full_numbers")
show()
?dgamma
?show
runApp()
library(shiny)
setwd("Z:\\Example codes\\R\\09 Developing Data Products\\courseproj")
runApp()
runApp()
shiny::runApp()
response <- GET(url = "https://www.dropbox.com/s/rqt6gk0vrdylehe/nasdaq.csv?dl=1")
datasetIXIC <- read.csv(rawConnection(response$content))
rawConnection(response$content)
rawConnection(response$content)
datasetIXIC <- read.csv(textConnection(response$content))
?textConnection
datasetIXIC <- read.csv(textConnection(response$content))
library(rdrop2)
install.packages("rdrop2")
drop_read_csv("https://www.dropbox.com/s/25joq3q1wf3yunx/hsi.csv?dl=1", stringAsFactors=FALSE)
library(rdrop2)
drop_read_csv("https://www.dropbox.com/s/25joq3q1wf3yunx/hsi.csv?dl=1", stringAsFactors=FALSE)
drop_read_csv("https://www.dropbox.com/s/25joq3q1wf3yunx/hsi.csv?dl=1", stringAsFactors=FALSE)
runApps()
runApp()
deployApp()
library(shinyapps)
deployApp()
setwd("Z:\\Example codes\\R\\09 Developing Data Products\\R presentation")
Stock index investigator
